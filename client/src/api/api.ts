/* tslint:disable */
/* eslint-disable */
/**
 * LogVista API
 * This is LogVista server.
 *
 * The version of the OpenAPI document: 0.1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface SchemasErrorResponse
 */
export interface SchemasErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface SchemasLog
 */
export interface SchemasLog {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SchemasLog
     */
    'attributes'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'available_memory'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'cpu_idle_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'cpu_percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'cpu_system_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'cpu_user_time'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'exc_detail'?: string;
    /**
     * 
     * @type {Array<SchemasTraceback>}
     * @memberof SchemasLog
     */
    'exc_traceback'?: Array<SchemasTraceback>;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'exc_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'exc_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'file_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'free_memory'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'func_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'level_name': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'levelno'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'lineno'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'memory_percent'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'module'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'process'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'process_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'system_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'thread'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'thread_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLog
     */
    'timestamp': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'total_memory'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLog
     */
    'used_memory'?: number;
}
/**
 * 
 * @export
 * @interface SchemasLogResponse
 */
export interface SchemasLogResponse {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SchemasLogResponse
     */
    'attributes'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'available_memory'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'cpu_idle_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'cpu_percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'cpu_system_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'cpu_user_time'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'exc_detail'?: string;
    /**
     * 
     * @type {Array<SchemasTracebackResponse>}
     * @memberof SchemasLogResponse
     */
    'exc_traceback'?: Array<SchemasTracebackResponse>;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'exc_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'exc_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'file_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'free_memory'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'func_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'level_name': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'levelno'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'lineno'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'memory_percent'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'module'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'process'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'process_name'?: string;
    /**
     * 
     * @type {SchemasSystemResponse}
     * @memberof SchemasLogResponse
     */
    'system': SchemasSystemResponse;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'system_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'thread'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'thread_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'timestamp': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'total_memory'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasLogResponse
     */
    'updated_at': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasLogResponse
     */
    'used_memory'?: number;
}
/**
 * 
 * @export
 * @interface SchemasPaginatedLogResponse
 */
export interface SchemasPaginatedLogResponse {
    /**
     * ログの配列
     * @type {Array<SchemasLogResponse>}
     * @memberof SchemasPaginatedLogResponse
     */
    'items'?: Array<SchemasLogResponse>;
    /**
     * 1ページあたりのアイテム数
     * @type {number}
     * @memberof SchemasPaginatedLogResponse
     */
    'limit'?: number;
    /**
     * 現在のページ数
     * @type {number}
     * @memberof SchemasPaginatedLogResponse
     */
    'page'?: number;
    /**
     * 総アイテム数
     * @type {number}
     * @memberof SchemasPaginatedLogResponse
     */
    'total'?: number;
    /**
     * 総ページ数
     * @type {number}
     * @memberof SchemasPaginatedLogResponse
     */
    'total_pages'?: number;
}
/**
 * 
 * @export
 * @interface SchemasResponseMessage
 */
export interface SchemasResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof SchemasResponseMessage
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface SchemasSummary
 */
export interface SchemasSummary {
    /**
     * 
     * @type {string}
     * @memberof SchemasSummary
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSummary
     */
    'created_at': string;
    /**
     * 
     * @type {Array<SchemasSummaryData>}
     * @memberof SchemasSummary
     */
    'data': Array<SchemasSummaryData>;
    /**
     * 
     * @type {string}
     * @memberof SchemasSummary
     */
    'id': string;
    /**
     * 
     * @type {SchemasLogResponse}
     * @memberof SchemasSummary
     */
    'latest_log': SchemasLogResponse;
    /**
     * 
     * @type {string}
     * @memberof SchemasSummary
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSummary
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface SchemasSummaryData
 */
export interface SchemasSummaryData {
    /**
     * 
     * @type {string}
     * @memberof SchemasSummaryData
     */
    'base_time': string;
    /**
     * 
     * @type {number}
     * @memberof SchemasSummaryData
     */
    'errorlog_count': number;
    /**
     * 
     * @type {number}
     * @memberof SchemasSummaryData
     */
    'infolog_count': number;
    /**
     * 
     * @type {number}
     * @memberof SchemasSummaryData
     */
    'warninglog_count': number;
}
/**
 * 
 * @export
 * @interface SchemasSystemRequest
 */
export interface SchemasSystemRequest {
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemRequest
     */
    'category'?: string;
}
/**
 * 
 * @export
 * @interface SchemasSystemResponse
 */
export interface SchemasSystemResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemResponse
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasSystemResponse
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface SchemasTraceback
 */
export interface SchemasTraceback {
    /**
     * 
     * @type {string}
     * @memberof SchemasTraceback
     */
    'tb_filename'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasTraceback
     */
    'tb_line'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasTraceback
     */
    'tb_lineno'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasTraceback
     */
    'tb_name'?: string;
}
/**
 * 
 * @export
 * @interface SchemasTracebackResponse
 */
export interface SchemasTracebackResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasTracebackResponse
     */
    'tb_filename'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasTracebackResponse
     */
    'tb_line'?: string;
    /**
     * 
     * @type {number}
     * @memberof SchemasTracebackResponse
     */
    'tb_lineno'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchemasTracebackResponse
     */
    'tb_name'?: string;
}

/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 200 OKが返ってくれば起動済み
         * @summary ヘルスチェック用エンドポイント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 200 OKが返ってくれば起動済み
         * @summary ヘルスチェック用エンドポイント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheckGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheckGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneralApi.healthcheckGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * 200 OKが返ってくれば起動済み
         * @summary ヘルスチェック用エンドポイント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckGet(options?: any): AxiosPromise<SchemasResponseMessage> {
            return localVarFp.healthcheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * 200 OKが返ってくれば起動済み
     * @summary ヘルスチェック用エンドポイント
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public healthcheckGet(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).healthcheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 蓄積されているログ情報を取得する。クエリパラメータでフィルタリングが可能。
         * @summary 取得ログ情報
         * @param {number} [page] 現在のページ
         * @param {number} [pageSize] 1ページあたりのアイテム数
         * @param {string} [startDate] 検索する日付の開始範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [endDate] 検索する日付の終了範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [levelName] ログレベルでのフィルタ
         * @param {string} [systemName] システム名でのフィルタ
         * @param {string} [containMsg] メッセージ内容の部分一致フィルタ
         * @param {string} [excType] エラーの種類でのフィルタ
         * @param {string} [excDetail] エラーの詳細でのキーワード部分一致フィルタ
         * @param {string} [fileName] ファイル名でのフィルタ
         * @param {number} [lineno] エラーが発生した行番号でのフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGet: async (page?: number, pageSize?: number, startDate?: string, endDate?: string, levelName?: string, systemName?: string, containMsg?: string, excType?: string, excDetail?: string, fileName?: string, lineno?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (levelName !== undefined) {
                localVarQueryParameter['levelName'] = levelName;
            }

            if (systemName !== undefined) {
                localVarQueryParameter['systemName'] = systemName;
            }

            if (containMsg !== undefined) {
                localVarQueryParameter['containMsg'] = containMsg;
            }

            if (excType !== undefined) {
                localVarQueryParameter['excType'] = excType;
            }

            if (excDetail !== undefined) {
                localVarQueryParameter['excDetail'] = excDetail;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (lineno !== undefined) {
                localVarQueryParameter['lineno'] = lineno;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * json形式の配列で受け取ったログ情報を記録する
         * @summary python-logvista用エンドポイント
         * @param {Array<SchemasLog>} [logs] ログデータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsPythonLogvistaPost: async (logs?: Array<SchemasLog>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/python-logvista`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 蓄積されているログ情報を取得する。クエリパラメータでフィルタリングが可能。
         * @summary 取得ログ情報
         * @param {number} [page] 現在のページ
         * @param {number} [pageSize] 1ページあたりのアイテム数
         * @param {string} [startDate] 検索する日付の開始範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [endDate] 検索する日付の終了範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [levelName] ログレベルでのフィルタ
         * @param {string} [systemName] システム名でのフィルタ
         * @param {string} [containMsg] メッセージ内容の部分一致フィルタ
         * @param {string} [excType] エラーの種類でのフィルタ
         * @param {string} [excDetail] エラーの詳細でのキーワード部分一致フィルタ
         * @param {string} [fileName] ファイル名でのフィルタ
         * @param {number} [lineno] エラーが発生した行番号でのフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsGet(page?: number, pageSize?: number, startDate?: string, endDate?: string, levelName?: string, systemName?: string, containMsg?: string, excType?: string, excDetail?: string, fileName?: string, lineno?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemasPaginatedLogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsGet(page, pageSize, startDate, endDate, levelName, systemName, containMsg, excType, excDetail, fileName, lineno, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LogsApi.logsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * json形式の配列で受け取ったログ情報を記録する
         * @summary python-logvista用エンドポイント
         * @param {Array<SchemasLog>} [logs] ログデータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsPythonLogvistaPost(logs?: Array<SchemasLog>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchemasLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsPythonLogvistaPost(logs, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LogsApi.logsPythonLogvistaPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsApiFp(configuration)
    return {
        /**
         * 蓄積されているログ情報を取得する。クエリパラメータでフィルタリングが可能。
         * @summary 取得ログ情報
         * @param {number} [page] 現在のページ
         * @param {number} [pageSize] 1ページあたりのアイテム数
         * @param {string} [startDate] 検索する日付の開始範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [endDate] 検索する日付の終了範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
         * @param {string} [levelName] ログレベルでのフィルタ
         * @param {string} [systemName] システム名でのフィルタ
         * @param {string} [containMsg] メッセージ内容の部分一致フィルタ
         * @param {string} [excType] エラーの種類でのフィルタ
         * @param {string} [excDetail] エラーの詳細でのキーワード部分一致フィルタ
         * @param {string} [fileName] ファイル名でのフィルタ
         * @param {number} [lineno] エラーが発生した行番号でのフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGet(page?: number, pageSize?: number, startDate?: string, endDate?: string, levelName?: string, systemName?: string, containMsg?: string, excType?: string, excDetail?: string, fileName?: string, lineno?: number, options?: any): AxiosPromise<SchemasPaginatedLogResponse> {
            return localVarFp.logsGet(page, pageSize, startDate, endDate, levelName, systemName, containMsg, excType, excDetail, fileName, lineno, options).then((request) => request(axios, basePath));
        },
        /**
         * json形式の配列で受け取ったログ情報を記録する
         * @summary python-logvista用エンドポイント
         * @param {Array<SchemasLog>} [logs] ログデータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsPythonLogvistaPost(logs?: Array<SchemasLog>, options?: any): AxiosPromise<Array<SchemasLog>> {
            return localVarFp.logsPythonLogvistaPost(logs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     * 蓄積されているログ情報を取得する。クエリパラメータでフィルタリングが可能。
     * @summary 取得ログ情報
     * @param {number} [page] 現在のページ
     * @param {number} [pageSize] 1ページあたりのアイテム数
     * @param {string} [startDate] 検索する日付の開始範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
     * @param {string} [endDate] 検索する日付の終了範囲 (形式: YYYY-MM-DDTHH:MM:SSZ)
     * @param {string} [levelName] ログレベルでのフィルタ
     * @param {string} [systemName] システム名でのフィルタ
     * @param {string} [containMsg] メッセージ内容の部分一致フィルタ
     * @param {string} [excType] エラーの種類でのフィルタ
     * @param {string} [excDetail] エラーの詳細でのキーワード部分一致フィルタ
     * @param {string} [fileName] ファイル名でのフィルタ
     * @param {number} [lineno] エラーが発生した行番号でのフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public logsGet(page?: number, pageSize?: number, startDate?: string, endDate?: string, levelName?: string, systemName?: string, containMsg?: string, excType?: string, excDetail?: string, fileName?: string, lineno?: number, options?: AxiosRequestConfig) {
        return LogsApiFp(this.configuration).logsGet(page, pageSize, startDate, endDate, levelName, systemName, containMsg, excType, excDetail, fileName, lineno, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * json形式の配列で受け取ったログ情報を記録する
     * @summary python-logvista用エンドポイント
     * @param {Array<SchemasLog>} [logs] ログデータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public logsPythonLogvistaPost(logs?: Array<SchemasLog>, options?: AxiosRequestConfig) {
        return LogsApiFp(this.configuration).logsPythonLogvistaPost(logs, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MastersApi - axios parameter creator
 * @export
 */
export const MastersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DB上に存在するエラー型名一覧を取得する
         * @summary エラー型名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersErrorTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masters/error-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DB上に存在するファイル名一覧を取得する
         * @summary ファイル名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersFilesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masters/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DB上に存在するログレベル一覧を取得する
         * @summary ログレベル一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersLevelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/masters/levels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MastersApi - functional programming interface
 * @export
 */
export const MastersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MastersApiAxiosParamCreator(configuration)
    return {
        /**
         * DB上に存在するエラー型名一覧を取得する
         * @summary エラー型名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mastersErrorTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mastersErrorTypesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MastersApi.mastersErrorTypesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * DB上に存在するファイル名一覧を取得する
         * @summary ファイル名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mastersFilesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mastersFilesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MastersApi.mastersFilesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * DB上に存在するログレベル一覧を取得する
         * @summary ログレベル一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mastersLevelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mastersLevelsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MastersApi.mastersLevelsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MastersApi - factory interface
 * @export
 */
export const MastersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MastersApiFp(configuration)
    return {
        /**
         * DB上に存在するエラー型名一覧を取得する
         * @summary エラー型名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersErrorTypesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.mastersErrorTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * DB上に存在するファイル名一覧を取得する
         * @summary ファイル名一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersFilesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.mastersFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * DB上に存在するログレベル一覧を取得する
         * @summary ログレベル一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mastersLevelsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.mastersLevelsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MastersApi - object-oriented interface
 * @export
 * @class MastersApi
 * @extends {BaseAPI}
 */
export class MastersApi extends BaseAPI {
    /**
     * DB上に存在するエラー型名一覧を取得する
     * @summary エラー型名一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersApi
     */
    public mastersErrorTypesGet(options?: AxiosRequestConfig) {
        return MastersApiFp(this.configuration).mastersErrorTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DB上に存在するファイル名一覧を取得する
     * @summary ファイル名一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersApi
     */
    public mastersFilesGet(options?: AxiosRequestConfig) {
        return MastersApiFp(this.configuration).mastersFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DB上に存在するログレベル一覧を取得する
     * @summary ログレベル一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersApi
     */
    public mastersLevelsGet(options?: AxiosRequestConfig) {
        return MastersApiFp(this.configuration).mastersLevelsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DB上に存在するシステム一覧を取得する
         * @summary システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DB上に存在するシステム別集計情報を取得する
         * @summary システム集計情報取得
         * @param {string} [systemName] システム名：指定しない場合は全てのシステムを取得
         * @param {number} [timeSpan] 集計時間スパン（秒）: 10秒刻みで指定可能
         * @param {number} [dataCount] 取得データ個数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsSummaryGet: async (systemName?: string, timeSpan?: number, dataCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (systemName !== undefined) {
                localVarQueryParameter['systemName'] = systemName;
            }

            if (timeSpan !== undefined) {
                localVarQueryParameter['timeSpan'] = timeSpan;
            }

            if (dataCount !== undefined) {
                localVarQueryParameter['dataCount'] = dataCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DB上に存在するシステムを更新する
         * @summary システム更新
         * @param {string} systemName システム名
         * @param {SchemasSystemRequest} system Update System Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsSystemNamePut: async (systemName: string, system: SchemasSystemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemName' is not null or undefined
            assertParamExists('systemsSystemNamePut', 'systemName', systemName)
            // verify required parameter 'system' is not null or undefined
            assertParamExists('systemsSystemNamePut', 'system', system)
            const localVarPath = `/systems/{systemName}`
                .replace(`{${"systemName"}}`, encodeURIComponent(String(systemName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(system, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * DB上に存在するシステム一覧を取得する
         * @summary システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchemasSystemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemsApi.systemsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * DB上に存在するシステム別集計情報を取得する
         * @summary システム集計情報取得
         * @param {string} [systemName] システム名：指定しない場合は全てのシステムを取得
         * @param {number} [timeSpan] 集計時間スパン（秒）: 10秒刻みで指定可能
         * @param {number} [dataCount] 取得データ個数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemsSummaryGet(systemName?: string, timeSpan?: number, dataCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchemasSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemsSummaryGet(systemName, timeSpan, dataCount, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemsApi.systemsSummaryGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * DB上に存在するシステムを更新する
         * @summary システム更新
         * @param {string} systemName システム名
         * @param {SchemasSystemRequest} system Update System Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemsSystemNamePut(systemName: string, system: SchemasSystemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemsSystemNamePut(systemName, system, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemsApi.systemsSystemNamePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * DB上に存在するシステム一覧を取得する
         * @summary システム一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsGet(options?: any): AxiosPromise<Array<SchemasSystemResponse>> {
            return localVarFp.systemsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * DB上に存在するシステム別集計情報を取得する
         * @summary システム集計情報取得
         * @param {string} [systemName] システム名：指定しない場合は全てのシステムを取得
         * @param {number} [timeSpan] 集計時間スパン（秒）: 10秒刻みで指定可能
         * @param {number} [dataCount] 取得データ個数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsSummaryGet(systemName?: string, timeSpan?: number, dataCount?: number, options?: any): AxiosPromise<Array<SchemasSummary>> {
            return localVarFp.systemsSummaryGet(systemName, timeSpan, dataCount, options).then((request) => request(axios, basePath));
        },
        /**
         * DB上に存在するシステムを更新する
         * @summary システム更新
         * @param {string} systemName システム名
         * @param {SchemasSystemRequest} system Update System Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsSystemNamePut(systemName: string, system: SchemasSystemRequest, options?: any): AxiosPromise<string> {
            return localVarFp.systemsSystemNamePut(systemName, system, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI {
    /**
     * DB上に存在するシステム一覧を取得する
     * @summary システム一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public systemsGet(options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).systemsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DB上に存在するシステム別集計情報を取得する
     * @summary システム集計情報取得
     * @param {string} [systemName] システム名：指定しない場合は全てのシステムを取得
     * @param {number} [timeSpan] 集計時間スパン（秒）: 10秒刻みで指定可能
     * @param {number} [dataCount] 取得データ個数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public systemsSummaryGet(systemName?: string, timeSpan?: number, dataCount?: number, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).systemsSummaryGet(systemName, timeSpan, dataCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DB上に存在するシステムを更新する
     * @summary システム更新
     * @param {string} systemName システム名
     * @param {SchemasSystemRequest} system Update System Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public systemsSystemNamePut(systemName: string, system: SchemasSystemRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).systemsSystemNamePut(systemName, system, options).then((request) => request(this.axios, this.basePath));
    }
}



